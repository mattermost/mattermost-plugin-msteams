// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make generate"
// DO NOT EDIT

package timerlayer

import (
        "time"
	"database/sql"

	"github.com/mattermost/mattermost-plugin-msteams-sync/server/metrics"
	"github.com/mattermost/mattermost-plugin-msteams-sync/server/store"
	"github.com/mattermost/mattermost-plugin-msteams-sync/server/store/storemodels"

	"golang.org/x/oauth2"
)

type {{.Name}} struct {
	store.Store
	metrics metrics.Metrics
}

{{range $index, $element := .Methods}}
func (s *{{$.Name}}) {{$index}}({{$element.Params | joinParamsWithType}}) {{$element.Results | joinResultsForSignature}} {
	start := time.Now()
	{{if $element.Results | len | eq 0}}
	s.Store.{{$index}}({{$element.Params | joinParams}})
	{{else}}
	{{genResultsVars $element.Results false }} := s.Store.{{$index}}({{$element.Params | joinParams}})
	{{end}}
	elapsed := float64(time.Since(start)) / float64(time.Second)
        success := "false"
        if {{$element.Results | errorToBoolean}} {
                success = "true"
        }
		if s.metrics != nil {
			s.metrics.ObserveStoreMethodDuration("Store.{{$index}}", success, elapsed)
		}
	{{ with (genResultsVars $element.Results false ) -}}
	return {{ . }}
	{{- else -}}
	}
	{{- end }}
}
{{end}}

func New(childStore store.Store, metrics metrics.Metrics) *{{.Name}} {
	return &{{.Name}}{
		Store: childStore,
		metrics: metrics,
	}
}
