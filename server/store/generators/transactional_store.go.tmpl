// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make generate"
// DO NOT EDIT

// To add a public method, create its private implementation inside
// the sqlstore package with sq.BaseRunner as its first
// parameter. Annotate it with a @withTransaction comment if you need
// it to be transactional, or @withReplica if the method queries can
// go to a database replica instead of the master node. Then run `make
// generate` for the public method of the store to be created.

package sqlstore

import (
    "context"
    "time"

    "github.com/mattermost/mattermost-plugin-msteams/server/store/storemodels"

    "golang.org/x/oauth2"
)

{{range $index, $element := .Methods}}
func (s *{{$.Name}}) {{$index}}({{$element.Params | joinParamsWithType}}) {{$element.Results | joinResultsForSignature}} {
    {{- if $element.WithTransaction}}
    	tx, txErr := s.db.BeginTx(context.Background(), nil)
        if txErr != nil {
            return {{ genErrorResultsVars $element.Results "txErr"}}
    	}

        {{- if $element.Results | len | eq 0}}
    	s.{{$index | renameStoreMethod}}(tx, {{$element.Params | joinParams}})

        if err := tx.Commit(); err != nil {
           return {{ genErrorResultsVars $element.Results "err"}}
        }
    	{{else}}
    		{{genResultsVars $element.Results false }} := s.{{$index | renameStoreMethod}}(tx, {{$element.Params | joinParams}})
    		{{- if $element.Results | errorPresent }}
    			if {{$element.Results | errorVar}} != nil {
                    if rollbackErr := tx.Rollback(); rollbackErr != nil {
                       s.api.LogError("transaction rollback error", "Error", rollbackErr, "methodName", "{{$index}}")
                    }
                    return {{ genErrorResultsVars $element.Results "err"}}
    			}
    		{{end}}
            if err := tx.Commit(); err != nil {
               return {{ genErrorResultsVars $element.Results "err"}}
            }

	    	return {{ genResultsVars $element.Results true -}}
	    {{end}}
    {{- else if $element.WithReplica}}
    return s.{{$index | renameStoreMethod}}(s.replica, {{$element.Params | joinParams}})
    {{- else}}
    return s.{{$index | renameStoreMethod}}(s.db, {{$element.Params | joinParams}})
    {{- end}}
}
{{end}}
