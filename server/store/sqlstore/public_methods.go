// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make generate"
// DO NOT EDIT

// To add a public method, create an entry in the Store interface,
// prefix it with a @withTransaction comment if you need it to be
// transactional and then add a private method in the store itself
// with db sq.BaseRunner as the first parameter before running `make
// generate`

package sqlstore

import (
	"context"
	"time"

	"github.com/mattermost/mattermost-plugin-msteams/server/store/storemodels"

	"golang.org/x/oauth2"
)

func (s *SQLStore) DeleteLinkByChannelID(channelID string) error {
	return s.deleteLinkByChannelID(s.db, channelID)

}

func (s *SQLStore) DeleteSubscription(subscriptionID string) error {
	return s.deleteSubscription(s.db, subscriptionID)

}

func (s *SQLStore) DeleteUserFromWhitelist(userID string) error {
	return s.deleteUserFromWhitelist(s.db, userID)

}

func (s *SQLStore) DeleteUserInfo(mmUserID string) error {
	return s.deleteUserInfo(s.db, mmUserID)

}

func (s *SQLStore) DeleteUserInvite(mmUserID string) error {
	return s.deleteUserInvite(s.db, mmUserID)

}

func (s *SQLStore) GetChannelSubscription(subscriptionID string) (*storemodels.ChannelSubscription, error) {
	return s.getChannelSubscription(s.db, subscriptionID)

}

func (s *SQLStore) GetChannelSubscriptionByTeamsChannelID(teamsChannelID string) (*storemodels.ChannelSubscription, error) {
	return s.getChannelSubscriptionByTeamsChannelID(s.db, teamsChannelID)

}

func (s *SQLStore) GetChatSubscription(subscriptionID string) (*storemodels.ChatSubscription, error) {
	return s.getChatSubscription(s.db, subscriptionID)

}

func (s *SQLStore) GetConnectedUsers(page int, perPage int) ([]*storemodels.ConnectedUser, error) {
	return s.getConnectedUsers(s.db, page, perPage)

}

func (s *SQLStore) GetGlobalSubscription(subscriptionID string) (*storemodels.GlobalSubscription, error) {
	return s.getGlobalSubscription(s.db, subscriptionID)

}

func (s *SQLStore) GetHasConnectedCount() (int, error) {
	return s.getHasConnectedCount(s.db)

}

func (s *SQLStore) GetInvitedCount() (int, error) {
	return s.getInvitedCount(s.db)

}

func (s *SQLStore) GetInvitedUser(mmUserID string) (*storemodels.InvitedUser, error) {
	return s.getInvitedUser(s.db, mmUserID)

}

func (s *SQLStore) GetLinkByChannelID(channelID string) (*storemodels.ChannelLink, error) {
	return s.getLinkByChannelID(s.db, channelID)

}

func (s *SQLStore) GetLinkByMSTeamsChannelID(teamID string, channelID string) (*storemodels.ChannelLink, error) {
	return s.getLinkByMSTeamsChannelID(s.db, teamID, channelID)

}

func (s *SQLStore) GetPostInfoByMSTeamsID(chatID string, postID string) (*storemodels.PostInfo, error) {
	return s.getPostInfoByMSTeamsID(s.db, chatID, postID)

}

func (s *SQLStore) GetPostInfoByMattermostID(postID string) (*storemodels.PostInfo, error) {
	return s.getPostInfoByMattermostID(s.db, postID)

}

func (s *SQLStore) GetStats(remoteID string, preferenceCategory string) (*storemodels.Stats, error) {
	return s.getStats(s.db, remoteID, preferenceCategory)

}

func (s *SQLStore) GetSubscriptionType(subscriptionID string) (string, error) {
	return s.getSubscriptionType(s.db, subscriptionID)

}

func (s *SQLStore) GetSubscriptionsLastActivityAt() (map[string]time.Time, error) {
	return s.getSubscriptionsLastActivityAt(s.db)

}

func (s *SQLStore) GetTokenForMSTeamsUser(userID string) (*oauth2.Token, error) {
	return s.getTokenForMSTeamsUser(s.db, userID)

}

func (s *SQLStore) GetTokenForMattermostUser(userID string) (*oauth2.Token, error) {
	return s.getTokenForMattermostUser(s.db, userID)

}

func (s *SQLStore) GetUserConnectStatus(mmUserID string) (*storemodels.UserConnectStatus, error) {
	return s.getUserConnectStatus(s.db, mmUserID)

}

func (s *SQLStore) GetWhitelistCount() (int, error) {
	return s.getWhitelistCount(s.db)

}

func (s *SQLStore) GetWhitelistEmails(page int, perPage int) ([]string, error) {
	return s.getWhitelistEmails(s.db, page, perPage)

}

func (s *SQLStore) IsUserWhitelisted(userID string) (bool, error) {
	return s.isUserWhitelisted(s.db, userID)

}

func (s *SQLStore) LinkPosts(postInfo storemodels.PostInfo) error {
	return s.linkPosts(s.db, postInfo)

}

func (s *SQLStore) ListChannelLinks() ([]storemodels.ChannelLink, error) {
	return s.listChannelLinks(s.db)

}

func (s *SQLStore) ListChannelLinksWithNames() ([]*storemodels.ChannelLink, error) {
	return s.listChannelLinksWithNames(s.db)

}

func (s *SQLStore) ListChannelSubscriptions() ([]*storemodels.ChannelSubscription, error) {
	return s.listChannelSubscriptions(s.db)

}

func (s *SQLStore) ListChannelSubscriptionsToRefresh(certificate string) ([]*storemodels.ChannelSubscription, error) {
	return s.listChannelSubscriptionsToRefresh(s.db, certificate)

}

func (s *SQLStore) ListChatSubscriptionsToCheck() ([]storemodels.ChatSubscription, error) {
	return s.listChatSubscriptionsToCheck(s.db)

}

func (s *SQLStore) ListGlobalSubscriptions() ([]*storemodels.GlobalSubscription, error) {
	return s.listGlobalSubscriptions(s.db)

}

func (s *SQLStore) ListGlobalSubscriptionsToRefresh(certificate string) ([]*storemodels.GlobalSubscription, error) {
	return s.listGlobalSubscriptionsToRefresh(s.db, certificate)

}

func (s *SQLStore) MattermostToTeamsUserID(userID string) (string, error) {
	return s.mattermostToTeamsUserID(s.db, userID)

}

func (s *SQLStore) RecoverPost(postID string) error {
	return s.recoverPost(s.db, postID)

}

func (s *SQLStore) SaveChannelSubscription(subscription storemodels.ChannelSubscription) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.saveChannelSubscription(tx, subscription)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.api.LogError("transaction rollback error", "Error", rollbackErr, "methodName", "SaveChannelSubscription")
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) SaveChatSubscription(subscription storemodels.ChatSubscription) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.saveChatSubscription(tx, subscription)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.api.LogError("transaction rollback error", "Error", rollbackErr, "methodName", "SaveChatSubscription")
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) SaveGlobalSubscription(subscription storemodels.GlobalSubscription) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.saveGlobalSubscription(tx, subscription)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.api.LogError("transaction rollback error", "Error", rollbackErr, "methodName", "SaveGlobalSubscription")
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) SetPostLastUpdateAtByMSTeamsID(postID string, lastUpdateAt time.Time) error {
	return s.setPostLastUpdateAtByMSTeamsID(s.db, postID, lastUpdateAt)

}

func (s *SQLStore) SetPostLastUpdateAtByMattermostID(postID string, lastUpdateAt time.Time) error {
	return s.setPostLastUpdateAtByMattermostID(s.db, postID, lastUpdateAt)

}

func (s *SQLStore) SetUserInfo(userID string, msTeamsUserID string, token *oauth2.Token) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.setUserInfo(tx, userID, msTeamsUserID, token)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.api.LogError("transaction rollback error", "Error", rollbackErr, "methodName", "SetUserInfo")
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) SetWhitelist(userIDs []string, batchSize int) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.setWhitelist(tx, userIDs, batchSize)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.api.LogError("transaction rollback error", "Error", rollbackErr, "methodName", "SetWhitelist")
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) StoreChannelLink(link *storemodels.ChannelLink) error {
	return s.storeChannelLink(s.db, link)

}

func (s *SQLStore) StoreInvitedUser(invitedUser *storemodels.InvitedUser) error {
	return s.storeInvitedUser(s.db, invitedUser)

}

func (s *SQLStore) StoreUserInWhitelist(userID string) error {
	return s.storeUserInWhitelist(s.db, userID)

}

func (s *SQLStore) TeamsToMattermostUserID(userID string) (string, error) {
	return s.teamsToMattermostUserID(s.db, userID)

}

func (s *SQLStore) UpdateSubscriptionExpiresOn(subscriptionID string, expiresOn time.Time) error {
	return s.updateSubscriptionExpiresOn(s.db, subscriptionID, expiresOn)

}

func (s *SQLStore) UpdateSubscriptionLastActivityAt(subscriptionID string, lastActivityAt time.Time) error {
	return s.updateSubscriptionLastActivityAt(s.db, subscriptionID, lastActivityAt)

}
